#!/usr/bin/env node
const _require= module.__proto__.require;
module.__proto__.require = function(url) {
  const root = process.cwd().replace(/\\/g, '/');
  if (url[0] === '@') {
    url = root+'/src'+url.substr(1);
  }
  return _require.call(this, url);
};
global.r = require('@/util/r');
global.user = require('@/util/user');
global.sqlUtil = require('@/util/sqlUtil');
global.config = require('@/config');

/**
 * Module dependencies.
 */

const app = require('../src/app.js');
const debug = require('debug')('demo:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(config.PORT);
// app.set('port', port);


const server = http.createServer(app.callback());


/**
 *
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * @param {Number} val
 * @return {Object}
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


/**
 * @param {Number} error
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 *
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}

console.log('Serve running at:');
console.log('Local:   \033[32m http://localhost:'+port+'/');
console.log('\033[39m');
